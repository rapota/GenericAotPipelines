using Microsoft.CodeAnalysis.CSharp.Testing;
using Microsoft.CodeAnalysis.Testing;

namespace GenericAotPipelines.Generators.Tests;

public class DecoratorGeneratorTests
{
    [Fact]
    public async Task GenerationTest()
    {
        // Arrange
        string source = """
#nullable enable

using System;
using System.Threading;
using System.Threading.Tasks;

using GenericAotPipelines;

namespace FooHandlers.Handlers
{
    public interface IFooHandler : IHandler<bool, string>;

    [UsePipeline<Pipeline<bool, string>>]
    internal sealed partial class FooHandler : IFooHandler
    {
        public ValueTask<string> HandleAsync(bool request, CancellationToken ct = default)
        {
            return ValueTask.FromResult( request.ToString() );
        }
    }
}
""";

        string expectedGeneratedCode = """
// <auto-generated/>

#pragma warning disable
#nullable enable

using Microsoft.Extensions.DependencyInjection;

namespace FooHandlers.Handlers
{
    [global::System.CodeDom.Compiler.GeneratedCode("GenericAotPipelines.Generators.DecoratorGenerator", "1.0.0.0")]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    partial class FooHandler
    {
        private sealed class FooHandlerDecorator
            : global::GenericAotPipelines.PipelineDecorator<bool, string>
            , FooHandlers.Handlers.IFooHandler
        {
            public FooHandlerDecorator(
                GenericAotPipelines.Pipeline<bool, string> pipeline,
                FooHandler handler)
                : base(pipeline, handler)
            {
            }
        }
        
        internal static void RegisterDecoratedHandler(IServiceCollection services)
        {
            services
                .AddTransient<FooHandler>()
                .AddTransient<FooHandlers.Handlers.IFooHandler, FooHandlerDecorator>();
        }
    }
}

""";

        string expectedGeneratedCode2 = """
// <auto-generated/>

#pragma warning disable
#nullable enable

using Microsoft.Extensions.DependencyInjection;

namespace GenericAotPipelinesExtensions
{
    [global::System.CodeDom.Compiler.GeneratedCode("GenericAotPipelines.Generators.DecoratorGenerator", "1.0.0.0")]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    internal static class GenericAotPipelinesRegistrationExtensions
    {
        public static IServiceCollection RegisterDecoratedHandlers(this IServiceCollection services)
        {
            FooHandlers.Handlers.FooHandler.RegisterDecoratedHandler(services);
            return services;
        }
    }
}

""";

        DecoratorGeneratorTest test = new()
        {
            ReferenceAssemblies = ReferenceAssemblies.Net.Net90
                .AddPackages([
                    new PackageIdentity("Microsoft.Extensions.DependencyInjection.Abstractions", "9.0.8")
                ]),
            TestState =
            {
                Sources = { CodeBase.CommonCode, source },
                GeneratedSources =
                {
                    (typeof(DecoratorGenerator), "FooHandler.g.cs", expectedGeneratedCode),
                    (typeof(DecoratorGenerator), "GenericAotPipelinesExtensions.g.cs", expectedGeneratedCode2)
                }
            }
        };

        await test.RunAsync();
    }

    class DecoratorGeneratorTest : CSharpSourceGeneratorTest<DecoratorGenerator, DefaultVerifier>
    {
        //protected override CompilationOptions CreateCompilationOptions()
        //{
        //    var options = (CSharpCompilationOptions)base.CreateCompilationOptions();
        //    //options.With
        //
        //    return options.WithUsings(
        //        "System",
        //        "System.Threading",
        //        "System.Threading.Tasks");
        //}

        //protected override ParseOptions CreateParseOptions()
        //{
        //    var options = (CSharpParseOptions)base.CreateParseOptions();
        //    return options.WithLanguageVersion(LanguageVersion.Latest);
        //}
    }
}